<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Blob</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>onWall = true;
cocked = false;
startPointX = 0;
startPointY = 0;
endPointX = 0;
endPointY = 0;
xDirection = 0;
yDirection = 0;
jumpAngle = 0;
angleBound = 30;
fallSpeed = background_vspeed[1];
speed = 0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(x + hspeed + (sprite_width/2) &lt;= 21 || x + hspeed + (sprite_width/2) &gt;= 700){
if( !place_free(x-100,y) || !place_free(x+100,y) || !place_free(x,y-100) || !place_free(x,y+100)){
    onWall = true;
    //y+=fallSpeed;
}else{
    onWall = false;
}


if(!place_free(x+hspeed, y+vspeed)){
    move_contact_solid(direction, speed);     
    speed = 0;   
}

if (device_mouse_check_button_pressed(0, mb_left) &amp;&amp; onWall){
    cocked = true;
    startPointX = mouse_x;
    startPointY = mouse_y;
    
}


if (device_mouse_check_button_released(0, mb_left) &amp;&amp; onWall){
    cocked = false;
    endPointX = mouse_x;
    endPointY = mouse_y;
    jumpAngle = point_direction(startPointX, startPointY,endPointX, endPointY );
    
    show_debug_message(jumpAngle);
    direction = jumpAngle;
    image_angle = direction;
    speed = 50;
}

if(place_meeting(x, y, obj_saw)){
    part_particles_create(global.ps, x, y, global.pt_blood, 10);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (cocked){
    draw_arrow(startPointX, startPointY-500 ,mouse_x , mouse_y-500, 100);    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
